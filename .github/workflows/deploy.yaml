name: Build and Deploy

on:
  push:
    branches:
      - mother

jobs:
  build:
    permissions: write-all
    name: Build and push Docker image to GitHub Container Registry
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | awk -F '/' '{print tolower($2)}')" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save Kube Config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p ~/.kube/
          echo "${KUBECONFIG}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy app
        env:
          CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}

        run: |
          cd helm
          helm upgrade pgsql-backup --namespace=pgsql -f values.yaml . \
            --set=envSecrets.CLOUDFLARE_ACCESS_KEY_ID="$CLOUDFLARE_ACCESS_KEY_ID" \
            --set=envSecrets.CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
            --set=envSecrets.CLOUDFLARE_API_TOKEN="$CLOUDFLARE_API_TOKEN" \
            --set=envSecrets.CLOUDFLARE_SECRET_ACCESS_KEY="$CLOUDFLARE_SECRET_ACCESS_KEY" \
          ;
          kubectl rollout restart deployment/pgsql-backup